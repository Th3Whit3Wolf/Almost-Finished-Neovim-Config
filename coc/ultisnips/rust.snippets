# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet _ "force type error"
let _: () = $0;
endsnippet

snippet mao "match Option"
match $1 {
	Some($2) => {
		//
	},
	None => {
		//
	},
}
endsnippet

snippet mar "match Result"
match $1 {
	Ok($2) => {
		//
	},
	Err($3) => {
		//
	},
}
endsnippet

snippet ma "match" b
match $1 {
	$2 => {
		//
	},
}
endsnippet

snippet i "impl"
impl $1 {
	$2
}
endsnippet

snippet it "impl trait"
impl $1 for $2 {
	$3
}
endsnippet

snippet s "struct"
#[derive(Debug)]
struct $1 {
	$2
}
endsnippet

snippet si "struct and impl"
#[derive(Debug)]
struct $1 {
	$2
}

impl $1 {
	$3
}
endsnippet

snippet t "trait"
trait $1 {
	$2
}
endsnippet

snippet d "debug"
dbg!($0)
endsnippet

snippet pl "println"
println!("{:?}", $0)
endsnippet

snippet test "test module"
#[cfg(test)]
mod test {
    #[allow(unused_imports)]
    use super::*;

    #[test]
    fn test_something() {
        assert_eq!(1, 2);
    }
}
endsnippet

snippet new "new function"
fn new($1) -> Self {
	$0
}
endsnippet

snippet todo "todo"
// TODO: $0
endsnippet

snippet td "todo!"
todo!()
endsnippet

snippet p "panic!"
panic!()
endsnippet

snippet ps "panic!"
panic!("{:?}", $0)
endsnippet

snippet main "main function"
fn main() {
	$0
}
endsnippet

snippet display "display impl"
impl fmt::Display for $1 {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		write!(f, "({}, {})", $2)
	}
}
endsnippet

snippet iflet "if let option"
if let Some($1) = $2 {
	$3
} else {
	$4
}$5
endsnippet

snippet e "enum"
#[derive(Debug)]
enum $1 {
	$2
}
endsnippet

snippet debug "derive debug"
#[derive(Debug)]
endsnippet
