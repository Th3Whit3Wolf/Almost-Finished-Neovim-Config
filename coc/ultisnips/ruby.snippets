snippet fc "factory girl create" b
$1 = create :$1$0
endsnippet

snippet fb "factory girl build" b
$1 = build :$1$0
endsnippet

snippet fbs "factory girl build stubbed" b
$1 = build_stubbed :$1$0
endsnippet

snippet ###
=begin
  $0
=end
endsnippet

snippet tap
.tap { |x| require "pry"; binding.pry }
endsnippet

snippet def "def" b
def ${1:name}${2:(${3:args})}
	$0
end
endsnippet

snippet al "allow" b
allow($1).to receive(:$2)$0
endsnippet

snippet des "description" b
describe "$1" do
  $2
end
endsnippet

snippet fea
feature "$1" do
  $2
end
endsnippet

snippet it
it "$1" do
  $2
end
endsnippet

snippet sce
scenario "$1" do
  $2
end
endsnippet

snippet con "context" b
context "$1" do
  $2
end
endsnippet

snippet pry
require "pry"; binding.pry
endsnippet

snippet bug
require "byebug"; byebug
endsnippet

snippet save
save_and_open_page
endsnippet

snippet debug
puts "DEBUG: $1 => #{$1.inspect}"
endsnippet

snippet eb "expect with block" b
expect do
	$1
end.to $2
endsnippet

snippet e "expect" b
expect($1).to $2
endsnippet

snippet testinggems
group :development do
  gem "spring"
  gem "spring-commands-rspec"
end

group :development, :test do
  gem "capybara"
  gem "factory_girl_rails"
  gem "rspec-rails"
  gem "shoulda-matchers"
end
endsnippet

snippet specl
require "rails_helper"
require_relative "$1"

describe "$2" do
  it "$3" do
    $0
  end
end
endsnippet

global !p
def title(x):
	return x.title()

def class_name():
	path_components = path.split("/")
	basename = path_components[-1].replace(".rb", "")
	return "".join(map(title, basename.split(" "))).replace("_", "")

def spec_name():
	return os.popen("/Users/david/dev/minor/ruby-snippet-helper/target/release/ruby-snippet-helper class_name_only " + path).read().replace("Spec", "")

def inheritance():
	if "controller" in path:
		return " < ApplicationController"
	if "jobs" in path:
		return " < ApplicationJob\n  def perform\n    \n  end"
	if "serializers" in path:
		return " < ActiveModel::Serializer"
	elif "model" in path:
		return " < ApplicationRecord"
	else:
		return ""

def current_line():
	return vim.eval("getline(line('.')-1)")

def singular_name():
	word = current_line().split(".")[-2].replace("@", "")
	return os.popen("singularize "+word).read().replace("\n", "")

def class_boilerplate():
	return os.popen("/Users/david/dev/minor/ruby-snippet-helper/target/release/ruby-snippet-helper class " + path).read()

def module_boilerplate():
	return os.popen("/Users/david/dev/minor/ruby-snippet-helper/target/release/ruby-snippet-helper module " + path).read()

endglobal

snippet class "Class for current file" !b
`!p snip.rv = class_boilerplate()`
endsnippet

snippet module "Class for current file" !b
`!p snip.rv = module_boilerplate()`
endsnippet

snippet mod "Class for current file" !b
`!p snip.rv = module_boilerplate()`
endsnippet

snippet spec
require "rails_helper"

describe `!p snip.rv = spec_name()` do
  it "$2" do
    $0
  end
end
endsnippet

snippet tests
require "application_system_test_case"

class `!p snip.rv = spec_name()` < ApplicationSystemTestCase
	test "$1" do
		$2
	end
end
endsnippet

snippet test
require "test_helper"

class `!p snip.rv = spec_name()` < ActiveSupport::TestCase
	test "$1" do
		$2
	end
end
endsnippet

snippet "each|map|reject|select|detect|all\?|sort" "Enum method" ir
`!p if not snip.c: snip.rv = match.group(0) + " do |" + singular_name() + "|"`
	$0
end
endsnippet

snippet ".inject" "Enum#inject" ir
.inject($1)`!p if not snip.c: snip.rv = " do |acc, " + singular_name() + "|"`
	$0
end
endsnippet

snippet "init" "initialize" ir
def initialize($1)
	$0
end
endsnippet

snippet "missing" "method_missing" ir
def method_missing(name, *args, &block)
end

def respond_to_missing(name, include_private = false)
end
endsnippet

snippet specf
require "rails_helper"

feature "$1" do
	scenario "$2" do
		$0
	end
end
endsnippet

snippet dude
dude = create :user$0
endsnippet

snippet john
john = create :user$0
endsnippet

snippet alice
alice = create :user, slug: "alice"
endsnippet

snippet bob
bob = create :user, slug: "bob"
endsnippet

snippet cindy
cindy = create :user, slug: "cindy"
endsnippet

snippet john
john = create :user, slug: "john"
endsnippet

snippet dude
dude = create :user, slug: "dude"
endsnippet

snippet kevin
kevin = create :user, username: "kevin"$0
endsnippet

snippet daren
daren = create :user, username: "daren"$0
endsnippet

snippet huron
huron = create :user, username: "huron"$0
endsnippet

snippet todo
# TODO: $0
endsnippet

snippet bench
require "benchmark/ips"

Benchmark.ips do |x|
  x.report("$1") do
    $2
  end

  x.report("$3") do
    $4
  end

  x.compare!
end
endsnippet
