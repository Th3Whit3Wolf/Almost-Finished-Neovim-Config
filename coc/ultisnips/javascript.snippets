###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...}"
for (var ${2:i} = 0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
var ${1:function_name} = function(${2:argument}) {
	${VISUAL}$0
};
endsnippet

snippet ifun
(function(${1:argument}) {
	${VISUAL}$0
})(${2:$1});
endsnippet

snippet afun
function(${1:argument}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
	${2://code}
} else {
	${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet class "class"
var ${1:name} = (function() {
	var $1 = function() {
	};

  var _ = $1.prototype;

	return $1;
})();
endsnippet

snippet sclass "class"
var ${1:name} = function(${2:arguments}) {
  var self = this;

	${3:properties}

	${0:methods}
};
endsnippet

snippet app "Application skeleton"
;(function(window, document, $, undefined) {
  var app = (function() {
    // Private functions go here

    return {
      // Public functions go here
    };
  })();

  $(function() {
    // Call public functions here
  });
})(window, document, jQuery);
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log(${1:"${2:value}"})
endsnippet

snippet log "console.log"
console.log(${1:"${2:value}"})
endsnippet

snippet st "setTimeout"
setTimeout(function() {
	$0
}, $1);
endsnippet

snippet pp "quick console debugging function"
function p() {
  console.log.apply(console, arguments);
  if (arguments.length === 1) return arguments[0];
}
endsnippet

snippet s "jquery selector"
$("$1").$0
endsnippet

snippet son "jquery on"
$("$1").on("${2:event}", "${3:selector}", function(e) {
	$0
});
endsnippet

snippet seach "jquery each"
$("$1").each(function(i, el) {
	$0
});
endsnippet

#
# JavaScript versions -- from the TextMate bundle + some additions
# for jasmine-jquery matchers
#
extends javascript

snippet des "Describe (js)" b
describe('${1:description}', function() {
	$0
});
endsnippet

snippet it "it (js)" b
it('${1:description}', function() {
	$0
});
endsnippet

snippet met "method" b
_.$1 = function($2) {
	$0
};
endsnippet

# vim:ft=snippets:
